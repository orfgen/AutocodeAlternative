/*
 * Copyright (c) 2011-2016, Peter Abeles. All Rights Reserved.
 *
 * This file is part of BoofCV (http://boofcv.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package boofcv.alg.misc;

import boofcv.alg.InputSanityCheck;
import boofcv.struct.image.*;

import javax.annotation.Generated;

/**
 * Computes statistical properties of pixels inside an image.
 * Actually, this is a truncated version to test the StringTemplate library.
 *
 * <p>DO NOT MODIFY: Generated by "?"</p>.
 *
 * @author Peter Abeles
 */
@Generated("boofcv.alg.misc.?")
public class ImageStatistics {


	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( GrayS8 input ) {
		return min( input.data, input.startIndex, input.height, input.width, input.stride );
	} 

	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( GrayS16 input ) {
		return min( input.data, input.startIndex, input.height, input.width, input.stride );
	} 


	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( GrayU8 input ) {
		return minU( input.data, input.startIndex, input.height, input.width, input.stride );
	} 

	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( GrayU16 input ) {
		return minU( input.data, input.startIndex, input.height, input.width, input.stride );
	} 


	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( InterleavedS8 input ) {
		return min( input.data, input.startIndex, input.height, input.width*input.numBands, input.stride );
	} 

	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( InterleavedS16 input ) {
		return min( input.data, input.startIndex, input.height, input.width*input.numBands, input.stride );
	} 


	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( InterleavedU8 input ) {
		return minU( input.data, input.startIndex, input.height, input.width*input.numBands, input.stride );
	} 

	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( InterleavedU16 input ) {
		return minU( input.data, input.startIndex, input.height, input.width*input.numBands, input.stride );
	} 




	private static int minU( byte[] array , int startIndex , int rows , int columns , int stride ) {

		int output = array[startIndex]& 0xFF;

		for( int y = 0; y < rows; y++ ) {
			int index = startIndex + y*stride;
			int end = index + columns;

			for( ; index < end; index++ ) {
				int v = array[index] & 0xFF;
				if( v < output )
					output = v;
			}
		}
		return output;
	}

	private static int min( short[] array , int startIndex , int rows , int columns , int stride ) {

		int output = array[startIndex];

		for( int y = 0; y < rows; y++ ) {
			int index = startIndex + y*stride;
			int end = index + columns;

			for( ; index < end; index++ ) {
				int v = array[index] ;
				if( v < output )
					output = v;
			}
		}
		return output;
	}

}