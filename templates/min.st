<! Header etc. !>
<copyright()>

package boofcv.alg.misc;

import boofcv.alg.InputSanityCheck;
import boofcv.struct.image.*;

import javax.annotation.Generated;

/**
 * Computes statistical properties of pixels inside an image.
 * Actually, this is a truncated version to test the StringTemplate library.
 *
 * \<p>DO NOT MODIFY: Generated by "?"\</p>.
 *
 * @author Peter Abeles
 */
@Generated("boofcv.alg.misc.?")
public class ImageStatistics {
 

<! Code generation starts here !>

<["Gray", "Interleaved"] : { family | 
<["S", "U"] : { signed |
<["8", "16"] : { numBits |
	/**
	 * Returns the minimum element value.
	 * 
	 * @param input Input image. Not modified.
	 * @return Minimum pixel value.
	 */
	public static int min( <family><signed><numBits> input ) {
		return min<if(isUnsigned.(signed))>U<endif>( input.data, input.startIndex, input.height, input.width<if(isInterleaved.(family))>*input.numBands<endif>, input.stride );
	\} <! StringTemplate is also using closing brackets, so we have to escape this. !>

}>}>}>


<! Static methods that are not generated !>
	private static int minU( byte[] array , int startIndex , int rows , int columns , int stride ) {

		int output = array[startIndex]& 0xFF;

		<! We have to escape all opening angle brackets a the moment. Could be changed later for something less common. !>
		for( int y = 0; y \< rows; y++ ) {
			int index = startIndex + y*stride;
			int end = index + columns;

			for( ; index \< end; index++ ) {
				int v = array[index] & 0xFF;
				if( v \< output )
					output = v;
			}
		}
		return output;
	}
	
	private static int min( short[] array , int startIndex , int rows , int columns , int stride ) {

		int output = array[startIndex];

		for( int y = 0; y \< rows; y++ ) {
			int index = startIndex + y*stride;
			int end = index + columns;

			for( ; index \< end; index++ ) {
				int v = array[index] ;
				if( v \< output )
					output = v;
			}
		}
		return output;
	}

}